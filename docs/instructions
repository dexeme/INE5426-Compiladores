-------- ANÁLISE LÉXICA --------

O que foi feito:
- Primeiro, criei cada autômato utilizando a ferramenta https://krliam.github.io/automata/
- Os autômatos que são diferentes (regras especiais) são: Ident, Int_constant,
Float_constant e String_constant
- Já os outros são renomeados com "reenumerate", como por exemplo, e ler "%" vai pro estado
"modulo", já que não ficaria muito legível ter o nome do estado como "%".
- Depois disso, uni todos esses autômatos, rodei e cliquei em "Copiar Json"
- Esse Json é o mesmo que tá no arquivo "automaton.json". Assim, sempre que a gente
precisar mexer na gramática, é só refazer esse processo e atualizar o arquivo.
- PS: No final da entrega, não vamos precisar do arquivo "automaton.json", vamos deixar o
autômato pronto, já que não vamos querer matar o tempo de execução do código parseando um
Json de 4000 linhas.

Agora sobre como os estados são nomeados e qual a lógica por trás:

- Os estados são nomeados de forma a indicar o que eles representam. Por exemplo, o estado
"def1,ident1" significa que estávamos no estado "Start", lemos um "d", e agora pode ser uma das
duas opções: ou vai ser um identificador (ident1) ou uma palavra reservada (def1).
- Por exemplo, se eu quiser ler "def main()", vai começar no estado "Start",
e quando ler "d", vai para o estado "def1,ident1", depois "e" para o estado "def2,ident1",
e assim por diante, até chegar no estado "def3,ident1". A dúvida que pode surgir é
"tá, mas o que é esse "ident1" no final?". Isso é basicamente porque enquanto estamos lendo "def", não
temos certeza se é um identificador ou não, então o autômato continua aceitando letras e números, como
se fosse um identificador. Assim que ele ler um espaço, ele vai entender que chegou no final
do token "def" e vai considerar que é um token válido. Se ele ler outro caractere que não seja
um espaço, ele vai continuar no estado "ident1", que é o estado de identificador, e vai aceitar
letras e números até que ele leia um espaço ou outro caractere que não seja permitido.

Pra parsear o Json e fornecer pro AL

- Pra isso criei um arquivo AutomatonReader, que faz o trabalho de parsear o arquivo Json
e extrair as informações de estados finais, transições, etc.
- Ele também cria o autômato a partir dessas informações, utilizando a classe Automaton.
- Depois, criei a classe pro analisador léxico, que utiliza o autômato para ler o código fonte e identificar os tokens.
- Pra testar é só rodar o código que está em "main"

Abaixo fica o código pra vocês colarem no site e testarem:

finite Ident {
    initial ident0
    ident0 A-Z -> ident1
    ident0 a-z -> ident1
    ident1 0-9 -> ident1
    ident1 a-z -> ident1
    ident1 A-Z -> ident1
    final ident1
}

finite Int_constant {
    initial int_constant0
    int_constant0 0-9 -> int_constant1
    int_constant1 0-9 -> int_constant1
    final int_constant1
}

finite Float_constant {
    initial float_constant0
    float_constant0 0-9 -> float_constant1
    float_constant1 0-9 -> float_constant1
    float_constant1 "." -> float_constant2
    float_constant2 0-9 -> float_constant3
    float_constant3 0-9 -> float_constant3
    final float_constant3
}

finite String_constant {
    initial string_constant0
    string_constant0 "\"" -> string_constant1
    string_constant1 0-9 -> string_constant1
    string_constant1 a-z -> string_constant1
    string_constant1 A-Z -> string_constant1
    string_constant1 "." -> string_constant1
    string_constant1 "?" -> string_constant1
    string_constant1 "!" -> string_constant1
    string_constant1 "#" -> string_constant1
    string_constant1 "@" -> string_constant1
    string_constant1 "&" -> string_constant1
    string_constant1 "*" -> string_constant1
    string_constant1 ")" -> string_constant1
    string_constant1 "(" -> string_constant1
    string_constant1 "-" -> string_constant1
    string_constant1 "_" -> string_constant1
    string_constant1 "=" -> string_constant1
    string_constant1 "+" -> string_constant1
    string_constant1 "/" -> string_constant1
    string_constant1 ":" -> string_constant1
    string_constant1 ";" -> string_constant1
    string_constant1 "," -> string_constant1
    string_constant1 "<" -> string_constant1
    string_constant1 ">" -> string_constant1
    string_constant1 "[" -> string_constant1
    string_constant1 "]" -> string_constant1
    string_constant1 "{" -> string_constant1
    string_constant1 "}" -> string_constant1
    string_constant1 "'" -> string_constant1
    string_constant1 "%" -> string_constant1
    string_constant1 "^" -> string_constant1
    string_constant1 "~" -> string_constant1
    string_constant1 "`" -> string_constant1
    string_constant1 "ç" -> string_constant1
    string_constant1 "ã" -> string_constant1
    string_constant1 "ẽ" -> string_constant1
    string_constant1 "ĩ" -> string_constant1
    string_constant1 "õ" -> string_constant1
    string_constant1 "ũ" -> string_constant1
    string_constant1 "â" -> string_constant1
    string_constant1 "ê" -> string_constant1
    string_constant1 "î" -> string_constant1
    string_constant1 "ô" -> string_constant1
    string_constant1 "û" -> string_constant1
    string_constant1 "á" -> string_constant1
    string_constant1 "é" -> string_constant1
    string_constant1 "í" -> string_constant1
    string_constant1 "ó" -> string_constant1
    string_constant1 "ú" -> string_constant1
    string_constant1 "\"" -> string_constant2
    final string_constant2
}


finite Def = reenumerate <def> as "def"
finite If = reenumerate <if> as "if"
finite Else = reenumerate <else> as "else"
finite For = reenumerate <for> as "for"
finite Return = reenumerate <return> as "return"
finite Break = reenumerate <break> as "break"
finite New = reenumerate <new> as "new"
finite Print_constant = reenumerate <print_constant> as "print_constant"
finite Read = reenumerate <read> as "read"
finite Null = reenumerate <null> as "null"
finite Int = reenumerate <int> as "int"
finite Float = reenumerate <float> as "float"
finite String = reenumerate <string> as "string"
finite Plus = reenumerate <\+> as "plus"
finite Minus = reenumerate <\-> as "minus"
finite Multiply = reenumerate <\*> as "multiply"
finite Divide = reenumerate </> as "divide"
finite Modulo = reenumerate <%> as "modulo"
finite Equal = reenumerate <\=> as "equal"
finite Equals = reenumerate <\==> as "equals"
finite Not_equals = reenumerate <!=> as "not_equals"
finite Less_than = reenumerate <\<> as "less_than"
finite Greater_than = reenumerate <\>> as "greater_than"
finite Less_than_or_equal = reenumerate <\<=> as "less_than_or_equal"
finite Greater_than_or_equal = reenumerate <\>=> as "greater_than_or_equal"
finite Open_paren = reenumerate <\(> as "open_paren"
finite Close_paren = reenumerate <\)> as "close_paren"
finite Open_bracket = reenumerate <\[> as "open_bracket"
finite Close_bracket = reenumerate <\]> as "close_bracket"
finite Open_curly_brace = reenumerate <\{> as "open_curly_brace"
finite Close_curly_brace = reenumerate <\}> as "close_curly_brace"
finite Comma = reenumerate <,> as "comma"
finite Semicolon = reenumerate <;> as "semicolon"

finite a = determinize(Ident | Int_constant | Float_constant | String_constant
| Def | If | Else | For | Return | Break | New | Print_constant | Read | Null | Int | Float | String
| Plus | Minus | Multiply | Divide | Modulo | Equal | Equals | Not_equals | Less_than | Greater_than
| Less_than_or_equal | Greater_than_or_equal | Open_paren | Close_paren | Open_bracket | Close_bracket
| Open_curly_brace | Close_curly_brace | Comma | Semicolon)

----- ANÁLISE SINTÁTICA -----

Como funciona a AST:
- A AST é uma árvore que representa a estrutura do código fonte.
- Cada nó da árvore representa uma construção sintática do código,
como uma expressão, uma declaração, um bloco de código, etc.
- A raiz da árvore é o nó que representa o programa como um t0do, no nosso caso é o nó "Program".
- Os filhos da raiz são os nós que representam as declarações do programa,
como funções, variáveis, etc.
- Cada nó pode ter filhos, que representam as partes da construção sintática.
- Por exemplo, um nó que representa uma função pode ter filhos que representam o nome da função,
os parâmetros da função, o corpo da função, etc.

Montagem da AST:
- A AST é montada a partir da análise sintática do código fonte.
- A montagem é feita dentro da classe 'SyntaxAnalyzer'
- O método parse() cria a lista de funções e, ao final, retorna o nó raiz (Program).
- Cada função guarda seu body (lista de StatementNode)
- Os nós específicos (ex.: AssignmentNode, IfNode, ForNode, etc.) são construídos em parseStatement(), conforme os
tokens são lidos.
- O retorno do método parse(), (que é o nó Program), é a AST, e pra exibir a árvore, basta chamar o método
toTree()
- A AST é exibida no console, e pode ser visualizada como uma árvore.
