grammar GramaticaFatorada start PROGRAM {
<PROGRAM> -> <STATEMENT> | <FUNCLIST> | ""

<FUNCLIST> -> <FUNCDEF> <FUNCLIST_CONT>

<FUNCLIST_CONT> -> <FUNCDEF> <FUNCLIST_CONT> | ""

<FUNCDEF> -> "def" "ident" "(" <PARAMLIST> ")" "{" <STATELIST> "}"

<PARAMLIST> -> <TYPE> "ident" <PARAMLIST_CONT> | ""

<PARAMLIST_CONT> -> "," <TYPE> "ident" <PARAMLIST_CONT> | ""

<STATEMENT> -> <VARDECL> ";" | <ATRIBSTAT> ";" | <PRINTSTAT> ";" | <READSTAT> ";" | <RETURNSTAT> ";" | <IFSTAT> | <FORSTAT> | "{" <STATELIST> "}" | "break" ";" | ";"

<VARDECL> -> <TYPE> "ident" <VARDECL_CONT>

<VARDECL_CONT> -> "[" "int_const" "]" <VARDECL_CONT> | ""

<ATRIBSTAT> -> "ident" <LVALUE> "=" <ATRIBSTAT_1>

<ATRIBSTAT_1> -> <ATRIBSTAT_2> | <ALLOCEXPRESSION> | "ident" <ATRIBSTAT_4> | <FACTOR> <TERM> <NUMEXPRESSION> <EXPRESSION_1>

<ATRIBSTAT_2> -> "+" <ATRIBSTAT_3> | "-" <ATRIBSTAT_3>

<ATRIBSTAT_3> -> <FACTOR> <TERM> <NUMEXPRESSION> <EXPRESSION_1> | "ident" <LVALUE> <TERM> <NUMEXPRESSION> <EXPRESSION_1>

<ATRIBSTAT_4> -> <FUNCCALL> | <LVALUE> <TERM> <NUMEXPRESSION> <EXPRESSION_1>

<FUNCCALL> -> "(" <PARAMLISTCALL> ")"

<PARAMLISTCALL> -> "ident" <PARAMLISTCALL_CONT> | ""

<PARAMLISTCALL_CONT> -> "," "ident" <PARAMLISTCALL_CONT> | ""

<PRINTSTAT> -> "print" <UNARYEXPR> <PRINTSTAT_CONT>

<PRINTSTAT_CONT> -> <FACTOR> <TERM> <NUMEXPRESSION> <EXPRESSION_1> | "ident" <LVALUE> <TERM> <NUMEXPRESSION> <EXPRESSION_1>

<READSTAT> -> "read" "ident" <LVALUE>

<RETURNSTAT> -> "return"

<IFSTAT> -> "if" "(" <IFSTAT_1>

<IFSTAT_1> -> <UNARYEXPR> <IFSTAT_2>

<IFSTAT_2> -> <FACTOR> <TERM> <NUMEXPRESSION> <EXPRESSION_1> ")" "{" <STATELIST> "}" <ELSE> | "ident" <LVALUE> <TERM> <NUMEXPRESSION> <EXPRESSION_1> ")" "{" <STATELIST> "}" <ELSE>

<ELSE> -> "else" | ""

<FORSTAT> -> "for" "(" <ATRIBSTAT> ";" <FORSTAT_1>

<FORSTAT_1> -> <UNARYEXPR> <FORSTAT_2>

<FORSTAT_2> -> <FACTOR> <TERM> <NUMEXPRESSION> <EXPRESSION_1> ";" <ATRIBSTAT> ")" <STATEMENT> | "ident" <LVALUE> <TERM> <NUMEXPRESSION> <EXPRESSION_1> ";" <ATRIBSTAT> ")" <STATEMENT>

<STATELIST> -> <STATEMENT> <STATELIST> | ""

<ALLOCEXPRESSION> -> "new" <TYPE> <ALLOCEXPRESSION_1>

<ALLOCEXPRESSION_1> -> "[" <UNARYEXPR> <ALLOCEXPRESSION_2>

<ALLOCEXPRESSION_2> -> <FACTOR> <TERM> <NUMEXPRESSION> "]" <ALLOCEXPRESSION_3> | "ident" <LVALUE> <TERM> <NUMEXPRESSION> "]" <ALLOCEXPRESSION_3>

<ALLOCEXPRESSION_3> -> "[" <UNARYEXPR> <ALLOCEXPRESSION_2> | ""

<EXPRESSION_1> -> <EXPRESSION_2> | ""

<EXPRESSION_2> -> <EXPRESSION_3> <UNARYEXPR> <EXPRESSION_4>

<EXPRESSION_3> -> "<" | ">" | "<=" | ">=" | "==" | "!="

<EXPRESSION_4> -> <FACTOR> <TERM> <NUMEXPRESSION> | "ident" <LVALUE> <TERM> <NUMEXPRESSION>

<NUMEXPRESSION> -> <NUMEXPRESSION_2> <UNARYEXPR> <NUMEXPRESSION_1> | ""

<NUMEXPRESSION_1> -> <FACTOR> <TERM> <NUMEXPRESSION> | "ident" <LVALUE> <TERM> <NUMEXPRESSION>

<NUMEXPRESSION_2> -> "+" | "-"

<TERM> -> <TERM_2> <UNARYEXPR> <TERM_1> | ""

<TERM_1> -> <FACTOR> <TERM> | "ident" <LVALUE> <TERM>

<TERM_2> -> "*" | "/" | "%"

<UNARYEXPR> -> "+" | "-" | ""

<FACTOR> -> "int_const" | "float_const" | "string_const" | "null" | "(" <NUMEXPRESSION> ")"

<LVALUE> -> "[" <LVALUE_CONT> | ""

<LVALUE_CONT> -> <FACTOR> <TERM> <NUMEXPRESSION> "]" <LVALUE> | "ident" <LVALUE> <TERM> <NUMEXPRESSION> "]" <LVALUE>

<TYPE> -> "int" | "float" | "string"
}